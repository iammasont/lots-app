// LUT (Look-Up Table) data model

// Default LUT parameters
export const defaultLutParams = {
    // Basic parameters
    size: 32,
    title: "Signature Look",
    contrast: 1.2,
    saturation: 1.15,
    redBalance: 1.05,
    greenBalance: 0.95,
    blueBalance: 1.1,
    shadowsShift: [0.05, 0.0, -0.05],
    highlightsShift: [0.03, 0.03, 0.0],
    
    // Advanced Lumetri-style parameters
    lumetri: {
      temperature: 0,
      tint: 0,
      exposure: 0,
      contrast: 0,
      highlights: 0,
      shadows: 0,
      whites: 0,
      blacks: 0,
      vibrance: 0,
      saturation: 100,
      fadedFilm: 0
    },
    
    // Color wheels
    colorWheels: {
      shadowTint: { r: 128, g: 128, b: 128 },
      highlightTint: { r: 128, g: 128, b: 128 },
      tintBalance: 0
    },
    
    // Curves
    curves: {
      rgb: [
        { x: 0, y: 0 },
        { x: 0.25, y: 0.25 },
        { x: 0.5, y: 0.5 },
        { x: 0.75, y: 0.75 },
        { x: 1, y: 1 }
      ],
      red: [
        { x: 0, y: 0 },
        { x: 0.25, y: 0.25 },
        { x: 0.5, y: 0.5 },
        { x: 0.75, y: 0.75 },
        { x: 1, y: 1 }
      ],
      green: [
        { x: 0, y: 0 },
        { x: 0.25, y: 0.25 },
        { x: 0.5, y: 0.5 },
        { x: 0.75, y: 0.75 },
        { x: 1, y: 1 }
      ],
      blue: [
        { x: 0, y: 0 },
        { x: 0.25, y: 0.25 },
        { x: 0.5, y: 0.5 },
        { x: 0.75, y: 0.75 },
        { x: 1, y: 1 }
      ],
      currentChannel: 'rgb'
    }
  };
  
  // LUT Model class
  export class LutModel {
    constructor(params = {}) {
      // Initialize with defaults, then override with provided params
      this.params = JSON.parse(JSON.stringify(defaultLutParams));
      
      // Merge provided params
      this.setParams(params);
    }
    
    // Set parameters for the LUT
    setParams(params) {
      // Helper function to perform deep merge
      const deepMerge = (target, source) => {
        for (const key in source) {
          if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {
            // If we don't have this property yet, create it
            if (!target[key] || typeof target[key] !== 'object') {
              target[key] = {};
            }
            deepMerge(target[key], source[key]);
          } else {
            // Simple property or array, just copy it
            target[key] = source[key];
          }
        }
      };
      
      // Perform deep merge of provided params
      deepMerge(this.params, params);
    }
    
    // Get the current LUT parameters
    getParams() {
      return JSON.parse(JSON.stringify(this.params));
    }
    
    // Reset LUT parameters to default values
    resetParams(category = null) {
      if (category) {
        // Reset only a specific category
        if (defaultLutParams[category]) {
          this.params[category] = JSON.parse(JSON.stringify(defaultLutParams[category]));
        }
      } else {
        // Reset all parameters
        this.params = JSON.parse(JSON.stringify(defaultLutParams));
      }
    }
    
    // Load parameters from a JSON string
    loadFromJson(jsonString) {
      try {
        const params = JSON.parse(jsonString);
        this.setParams(params);
        return true;
      } catch (error) {
        console.error('Failed to parse LUT JSON:', error);
        return false;
      }
    }
    
    // Convert parameters to JSON string for saving
    toJson() {
      return JSON.stringify(this.params, null, 2);
    }
    
    // Export to CUBE format data
    toCubeFormat() {
      // This would call the LUT generator service
      // For now, we'll return a basic format
      const size = this.params.size || 32;
      let content = '';
      
      // Header
      content += `# ${this.params.title}\n`;
      content += '# Generated by LOTS App\n\n';
      content += `LUT_3D_SIZE ${size}\n`;
      content += 'DOMAIN_MIN 0.0 0.0 0.0\n';
      content += 'DOMAIN_MAX 1.0 1.0 1.0\n\n';
      
      // In a real implementation, this would call a method to generate the actual LUT data
      content += '# LUT data would go here\n';
      content += '# (This is a placeholder)\n';
      
      return content;
    }
    
    // Parse a CUBE format LUT file and set parameters
    parseCubeFormat(cubeData) {
      // This is a placeholder for the actual implementation
      // It would parse a CUBE file and extract parameters
      console.log('Parsing CUBE format LUT (not yet implemented)');
      
      // In a real implementation, we would:
      // 1. Parse the header to get size, title, etc.
      // 2. Extract LUT data
      // 3. Reverse-engineer parameters from the LUT data (which is complex)
      
      return false; // Not yet implemented
    }
  }
  
  // Utility function to create a new LUT model with default parameters
  export function createDefaultLutModel() {
    return new LutModel();
  }
  
  // Export the model and utilities
  export default LutModel;